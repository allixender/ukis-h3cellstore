# build via an argo workflow.
#
# This could be used for CI
#
# Possible improvements:
# * create argument to pass in a commit/tag/branch to build. When not set, just build master
#
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: h3cellstore-ci
  generateName: h3cellstore-ci-
  namespace: gzs-default
spec:
  entrypoint: do
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: local-storage
        resources:
          requests:
            storage: 30Gi
  templates:
    - name: do
      steps:
        - - name: build
            template: build
    - name: build
      outputs:
        artifacts:
          - name: python-packages
            path: /tmp/python-packages
      sidecars:
        - name: clickhouse
          image: eoc-gzs-db01-vm.eoc.dlr.de:4002/gzs-clickhouse-server:22.11
          command:
            - /entrypoint.sh
          # TODO: securitycontext. reducing the required permissions probably requires a patched image :(
          args: [ ]
          resources:
            requests:
              cpu: 1
              ephemeral-storage: "2Gi"
      script:
        image: eoc-gzs-db01-vm.eoc.dlr.de:4002/rust-pylib:latest
        env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-token-h3cellstore
                key: token

          # publishing settings
          # for env variables see https://twine.readthedocs.io/en/latest/#twine-upload
          - name: TWINE_PASSWORD
            value: ""
          - name: TWINE_REPOSITORY
            value: ""
            #value: "https://eoc-gzs-db01-vm.eoc.dlr.de:8080/repository/py-internal/"
          - name: TWINE_PASSWORD
            value: ""
        command:
          - /bin/bash
        securityContext:
          runAsUser: 65534 # nobody user
          runAsGroup: 65534
          runAsNonRoot: true
        resources:
          requests:
            cpu: 4
            ephemeral-storage: "4Gi"
        volumeMounts:
          - name: work
            mountPath: /tmp
        source: |
          set -eu
          cd /tmp/

          python3 --version
          cargo --version
          
          # for pip/venv. otherwise the pip install triggered by maturin will attempt to write the pip cache
          # in /nonexistent directory :(
          export HOME=$PWD  

          rm -rf h3cellstore  # remove in case the WF has been retried
          git clone https://token:`echo "$GIT_TOKEN" | tr -d '\n'`@gitlab.dlr.de/gzs-processing/h3cellstore.git
          pushd h3cellstore
          set -x

          
          echo "---- clickhouse_arrow_grpc ---------------------------------------"
          pushd crates/ukis_clickhouse_arrow_grpc
          #cargo clippy --all-targets --no-deps
          cargo test --all-features --all-targets # runs test example
          popd
          
          echo "---- h3cellstore ----------------------------------------------"
          pushd crates/ukis_h3cellstore
          #cargo clippy --all-targets --no-deps
          cargo test --all-features --all-targets 
          popd
          
          echo "---- h3cellstorepy ----------------------------------------------"
          pushd crates/ukis_h3cellstorepy
          #cargo clippy --all-targets --no-deps
          cargo test --no-default-features
          python3 -m venv venv
          . venv/bin/activate
          python3 -m pip install --upgrade setuptools pip
          python3 install-dev-dependencies.py
          maturin develop
          export CLICKHOUSE_GRPC_TESTING_ENDPOINT="http://127.0.0.1:9100"
          pytest -s -vv --tb=native
          
          # prod wheels
          cargo clean --profile dev
          just build-prod
          popd
          mv target/wheels /tmp/python-packages
          
          
          echo "=== publish to PI ==================================================================="
          if [ -z "$TWINE_REPOSITORY" ]; then
             echo "no repository set - skipping"
          else
             echo "publishing to $TWINE_REPOSITORY"
             is_tagged_for_release=`(git describe | grep  -E '^v[0-9]+\.[0-9]+\.[0-9]+$') || echo ""`
             if [ -z "$is_tagged_for_release" ]; then
                echo "no release tagged - skipping"
             else
                pip install --upgrade twine
                twine upload --disable-progress-bar --verbose  /tmp/python-packages/*
             fi
          fi
